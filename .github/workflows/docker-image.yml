name: CI

# ────────────────────────────────
# Ejecuta en cada push y pull-request
# ────────────────────────────────
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write           # necesario para subir la imagen

env:
  PYTHON_VERSION: "3.12"
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}:latest

# … 👆 mismas claves 'name', 'on', 'permissions', 'env' …

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Install uv (and cache)
        uses: astral-sh/setup-uv@v6      # acción oficial :contentReference[oaicite:0]{index=0}

      # ─── Instalar dependencias ───────────────────────────
      - name: 📦 Instalar deps declaradas en pyproject.toml
        shell: bash
        run: |
          # Dependencias de producción + el propio paquete
          uv pip install -e .                      # editable        :contentReference[oaicite:1]{index=1}
          # Extras de desarrollo y test (si existen)
          uv pip install -e ".[dev,test]" || true  # ignora si no hay esas extras

      # ─── Linters, MyPy, tests, cobertura … (sin cambios) ───

      # ─── Linters ───────────────────────────
      - name: 🧹 Ruff (estilo + lint)
        run: ruff check .

      - name: 🔍 MyPy (tipo estático)
        run: mypy app

      # ─── Tests ────────────────────────────
      - name: 🧪 Pytest con cobertura
        run: |
          pytest -m "not e2e" -n auto --cov=app --cov-report=xml

      - name: 🧪 Pytest E2E (marca e2e)
        run: |
          pytest -m e2e --maxfail=1 --dist=loadfile -n auto

      # ─── Artefactos & cobertura ───────────
      - name: 📤 Subir cobertura a cobertura.io (opcional)
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml

# ────────────────────────────────
# 2. Job de build & push Docker
#    (sólo si todo lo anterior pasa)
# ────────────────────────────────
  docker:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Set up QEMU (multi-arch opcional)
        uses: docker/setup-qemu-action@v3

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login al Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Construir y subir imagen
        uses: docker/build-push-action@v5
        with:
          context: .
          target: prod                    # si tu Dockerfile tiene multi-stage
          push: true
          tags: ${{ env.DOCKER_IMAGE }}

      # ─── Publicar resumen ────────────────
      - name: 📄 Summary
        run: echo "Imagen subida como ${{ env.DOCKER_IMAGE }}" >> $GITHUB_STEP_SUMMARY
